schema {
  query: Query
  mutation: Mutation
  subscription: Subscriptions
}

interface Error {
  message: String!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type AddSubscriberPayload {
  errors: [AddSubscriberError!]
  subscriber: Subscriber
}

type AlreadySubscribedError implements Error {
  message: String!
  phoneNumber: String!
}

type Announcement {
  client: Client
  clientId: UUID
  messageSid: String!
  sentOn: DateTime
}

type Client implements Node {
  announcements: [Announcement!]!
  customerId: String
  id: ID!
  joinedDate: DateTime
  locale: String!
  name: String!
  phoneNumber: String!
  slug: String!
  subscribeLink: String!
  subscriberCount: Int!
  subscribers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [SubscriberSortInput!] where: SubscriberFilterInput): SubscribersConnection
  subscription: PlanSubscription
  subscriptionId: ID
}

type ClientNotFoundError implements Error {
  clientId: UUID!
  message: String!
}

"A connection to a list of items."
type ClientsConnection {
  "A list of edges."
  edges: [ClientsEdge!]
  "A flattened list of the nodes."
  nodes: [Client!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type ClientsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Client!
}

type CreatePlanPayload {
  plan: Plan
}

type CreatePriceTierPayload {
  priceTier: PriceTier
}

type DeleteClientPayload {
  client: Client
  errors: [DeleteClientError!]
}

type DeletePriceTierPayload {
  errors: [DeletePriceTierError!]
  priceTier: PriceTier
}

type DeleteSubscriberPayload {
  errors: [DeleteSubscriberError!]
  subscriber: Subscriber
}

type Discount {
  createdAt: DateTime
  discountCode: DiscountCode
  discountCodeId: Int
  id: Int!
  planSubscription: PlanSubscription
  planSubscriptionId: UUID
}

type DiscountCode {
  code: String!
  createdAt: DateTime
  description: String
  discount: Decimal!
  discounts: [Discount!]!
  duration: TimeSpan
  expiryDate: DateTime
  id: Int!
  name: String!
  priceTier: PriceTier
  priceTierId: Int
}

type EndSubscriptionPayload {
  errors: [EndSubscriptionError!]
  planSubscription: PlanSubscription
}

type KafkaProduceError implements Error {
  message: String!
  type: String!
}

type Mutation {
  addSubscriber(input: AddSubscriberInput!): AddSubscriberPayload!
  createPlan(input: CreatePlanInput!): CreatePlanPayload!
  createPriceTier(input: CreatePriceTierInput!): CreatePriceTierPayload!
  deleteClient(input: DeleteClientInput!): DeleteClientPayload!
  deletePriceTier(input: DeletePriceTierInput!): DeletePriceTierPayload!
  deleteSubscriber(input: DeleteSubscriberInput!): DeleteSubscriberPayload!
  endSubscription(input: EndSubscriptionInput!): EndSubscriptionPayload!
  sendMessage(input: SendMessageInput!): SendMessagePayload!
  subscribeToClient(input: SubscribeToClientInput!): SubscribeToClientPayload!
  subscribeToPlan(input: SubscribeToPlanInput!): SubscribeToPlanPayload!
  unsubscribeFromClient(input: UnsubscribeFromClientInput!): UnsubscribeFromClientPayload!
  updatePriceTier(input: UpdatePriceTierInput!): UpdatePriceTierPayload!
}

type NotSubscribedError implements Error {
  message: String!
  phoneNumber: String!
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Plan implements Node {
  createdAt: DateTime
  description: String
  iconUrl: String
  id: ID!
  isActive: Boolean
  name: String!
  priceTiers: [PriceTier!]!
}

type PlanSubscription implements Node {
  client: Client!
  clientId: ID!
  createdAt: DateTime
  discounts: [Discount!]!
  endDate: DateTime!
  id: ID!
  paymentConfirmationId: UUID!
  priceTier: PriceTier
  priceTierId: ID
  startDate: DateTime!
  status: String
  trials: [Trial!]!
}

type PlanSubscriptionNotFoundError implements Error {
  id: UUID!
  message: String!
}

"A connection to a list of items."
type PlanSubscriptionsConnection {
  "A list of edges."
  edges: [PlanSubscriptionsEdge!]
  "A flattened list of the nodes."
  nodes: [PlanSubscription!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type PlanSubscriptionsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PlanSubscription!
}

"A connection to a list of items."
type PlansConnection {
  "A list of edges."
  edges: [PlansEdge!]
  "A flattened list of the nodes."
  nodes: [Plan!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type PlansEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Plan!
}

type PriceTier implements Node {
  createdAt: DateTime
  description: String
  discountCodes: [DiscountCode!]!
  duration: TimeSpan!
  iconUrl: String
  id: ID!
  name: String!
  plan: Plan
  planId: ID
  planSubscriptions: [PlanSubscription!]!
  price: Decimal!
  priceTierFeatures: [PriceTierFeature!]!
  trialOffers: [TrialOffer!]!
}

type PriceTierFeature {
  aiSupport: Boolean
  id: Int!
  maxMessages: Int
  priceTier: PriceTier
  priceTierId: Int
  supportTier: String
}

type PriceTierNotFoundError implements Error {
  message: String!
  priceTierId: Int!
}

type Query {
  client(id: ID!): Client
  clients("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [ClientSortInput!] where: ClientFilterInput): ClientsConnection
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  plan(id: ID!): Plan
  plans("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [PlanSortInput!] where: PlanFilterInput): PlansConnection
  planSubscription(id: ID!): PlanSubscription
  planSubscriptions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [PlanSubscriptionSortInput!] where: PlanSubscriptionFilterInput): PlanSubscriptionsConnection
  priceTier(id: ID!): PriceTier
  priceTiers: [PriceTier!]!
  subscriber(id: ID!): Subscriber
  subscribers("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [SubscriberSortInput!] where: SubscriberFilterInput): SubscribersConnection
  totalClients: Int!
  totalPlans: Int!
  totalPlanSubscriptions: Int!
  totalSubscribers: Int!
  viewer: User
}

type SendMessageFailed implements Error {
  message: String!
  sid: String
}

type SendMessagePayload {
  errors: [SendMessageError!]
  failed: Int
  sent: Int
}

type SubscribeToClientPayload {
  client: Client
  errors: [SubscribeToClientError!]
}

type SubscribeToPlanPayload {
  errors: [SubscribeToPlanError!]
  planSubscription: PlanSubscription
}

type Subscriber implements Node {
  clients("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [ClientSortInput!] where: ClientFilterInput): ClientsConnection
  id: ID!
  joinedDate: DateTime
  locale: String!
  maskedPhone: String
  subscriptionCount: Int!
}

type SubscriberExistsError implements Error {
  message: String!
  phoneNumber: String!
}

type SubscriberNotFoundError implements Error {
  message: String!
  phoneNumber: String!
}

"A connection to a list of items."
type SubscribersConnection {
  "A list of edges."
  edges: [SubscribersEdge!]
  "A flattened list of the nodes."
  nodes: [Subscriber!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type SubscribersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Subscriber!
}

type Subscriptions {
  ClientAdded: Client
  subscriberAdded: Subscriber!
  SubscriberUnsubscribed: Subscriber
  subscriptionStarted: PlanSubscription
}

type Trial {
  createdAt: DateTime
  id: Int!
  planSubscription: PlanSubscription
  planSubscriptionId: UUID
  trailOffer: TrialOffer
  trailOfferId: Int
}

type TrialOffer {
  createdAt: DateTime
  description: String
  duration: TimeSpan!
  expiryDate: DateTime
  id: Int!
  name: String!
  priceTier: PriceTier
  priceTierId: Int
  trials: [Trial!]!
}

type UnsubscribeFromClientPayload {
  client: Client
  errors: [UnsubscribeFromClientError!]
}

type UpdatePriceTierPayload {
  errors: [UpdatePriceTierError!]
  priceTier: PriceTier
}

type User {
  id: String!
}

union AddSubscriberError = SubscriberExistsError

union DeleteClientError = ClientNotFoundError

union DeletePriceTierError = PriceTierNotFoundError

union DeleteSubscriberError = SubscriberNotFoundError

union EndSubscriptionError = KafkaProduceError | PlanSubscriptionNotFoundError

union SendMessageError = SendMessageFailed

union SubscribeToClientError = ClientNotFoundError | SubscriberNotFoundError | AlreadySubscribedError

union SubscribeToPlanError = KafkaProduceError | PriceTierNotFoundError

union UnsubscribeFromClientError = ClientNotFoundError | NotSubscribedError

union UpdatePriceTierError = PriceTierNotFoundError

input AddSubscriberInput {
  locale: String!
  phoneNumber: String!
}

input AnnouncementFilterInput {
  and: [AnnouncementFilterInput!]
  client: ClientFilterInput
  clientId: UuidOperationFilterInput
  messageSid: StringOperationFilterInput
  or: [AnnouncementFilterInput!]
  sentOn: DateTimeOperationFilterInput
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ClientFilterInput {
  and: [ClientFilterInput!]
  announcements: ListFilterInputTypeOfAnnouncementFilterInput
  customerId: StringOperationFilterInput
  id: UuidOperationFilterInput
  joinedDate: DateTimeOperationFilterInput
  locale: StringOperationFilterInput
  name: StringOperationFilterInput
  or: [ClientFilterInput!]
  phoneNumber: StringOperationFilterInput
  slug: StringOperationFilterInput
  subscriberPhoneNumbers: ListFilterInputTypeOfSubscriberFilterInput
  subscriptionId: StringOperationFilterInput
}

input ClientSortInput {
  customerId: SortEnumType
  id: SortEnumType
  joinedDate: SortEnumType
  locale: SortEnumType
  name: SortEnumType
  phoneNumber: SortEnumType
  slug: SortEnumType
  subscriptionId: SortEnumType
}

input CreatePlanInput {
  description: String!
  name: String!
}

input CreatePriceTierInput {
  duration: TimeSpan!
  name: String!
  planId: ID!
  price: Decimal!
}

input DateTimeOperationFilterInput {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  neq: DateTime
  ngt: DateTime
  ngte: DateTime
  nin: [DateTime]
  nlt: DateTime
  nlte: DateTime
}

input DecimalOperationFilterInput {
  eq: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  neq: Decimal
  ngt: Decimal
  ngte: Decimal
  nin: [Decimal]
  nlt: Decimal
  nlte: Decimal
}

input DeleteClientInput {
  id: ID!
}

input DeletePriceTierInput {
  id: ID!
}

input DeleteSubscriberInput {
  id: ID!
}

input DiscountCodeFilterInput {
  and: [DiscountCodeFilterInput!]
  code: StringOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  description: StringOperationFilterInput
  discount: DecimalOperationFilterInput
  discounts: ListFilterInputTypeOfDiscountFilterInput
  duration: TimeSpanOperationFilterInput
  expiryDate: DateTimeOperationFilterInput
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  or: [DiscountCodeFilterInput!]
  priceTier: PriceTierFilterInput
  priceTierId: IntOperationFilterInput
}

input DiscountFilterInput {
  and: [DiscountFilterInput!]
  createdAt: DateTimeOperationFilterInput
  discountCode: DiscountCodeFilterInput
  discountCodeId: IntOperationFilterInput
  id: IntOperationFilterInput
  or: [DiscountFilterInput!]
  planSubscription: PlanSubscriptionFilterInput
  planSubscriptionId: UuidOperationFilterInput
}

input EndSubscriptionInput {
  id: ID!
}

input IntOperationFilterInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  neq: Int
  ngt: Int
  ngte: Int
  nin: [Int]
  nlt: Int
  nlte: Int
}

input ListFilterInputTypeOfAnnouncementFilterInput {
  all: AnnouncementFilterInput
  any: Boolean
  none: AnnouncementFilterInput
  some: AnnouncementFilterInput
}

input ListFilterInputTypeOfClientFilterInput {
  all: ClientFilterInput
  any: Boolean
  none: ClientFilterInput
  some: ClientFilterInput
}

input ListFilterInputTypeOfDiscountCodeFilterInput {
  all: DiscountCodeFilterInput
  any: Boolean
  none: DiscountCodeFilterInput
  some: DiscountCodeFilterInput
}

input ListFilterInputTypeOfDiscountFilterInput {
  all: DiscountFilterInput
  any: Boolean
  none: DiscountFilterInput
  some: DiscountFilterInput
}

input ListFilterInputTypeOfPlanSubscriptionFilterInput {
  all: PlanSubscriptionFilterInput
  any: Boolean
  none: PlanSubscriptionFilterInput
  some: PlanSubscriptionFilterInput
}

input ListFilterInputTypeOfPriceTierFeatureFilterInput {
  all: PriceTierFeatureFilterInput
  any: Boolean
  none: PriceTierFeatureFilterInput
  some: PriceTierFeatureFilterInput
}

input ListFilterInputTypeOfPriceTierFilterInput {
  all: PriceTierFilterInput
  any: Boolean
  none: PriceTierFilterInput
  some: PriceTierFilterInput
}

input ListFilterInputTypeOfSubscriberFilterInput {
  all: SubscriberFilterInput
  any: Boolean
  none: SubscriberFilterInput
  some: SubscriberFilterInput
}

input ListFilterInputTypeOfTrialFilterInput {
  all: TrialFilterInput
  any: Boolean
  none: TrialFilterInput
  some: TrialFilterInput
}

input ListFilterInputTypeOfTrialOfferFilterInput {
  all: TrialOfferFilterInput
  any: Boolean
  none: TrialOfferFilterInput
  some: TrialOfferFilterInput
}

input PlanFilterInput {
  and: [PlanFilterInput!]
  createdAt: DateTimeOperationFilterInput
  description: StringOperationFilterInput
  iconUrl: StringOperationFilterInput
  id: IntOperationFilterInput
  isActive: BooleanOperationFilterInput
  name: StringOperationFilterInput
  or: [PlanFilterInput!]
  priceTiers: ListFilterInputTypeOfPriceTierFilterInput
}

input PlanSortInput {
  createdAt: SortEnumType
  description: SortEnumType
  iconUrl: SortEnumType
  id: SortEnumType
  isActive: SortEnumType
  name: SortEnumType
}

input PlanSubscriptionFilterInput {
  and: [PlanSubscriptionFilterInput!]
  clientId: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  discounts: ListFilterInputTypeOfDiscountFilterInput
  endDate: DateTimeOperationFilterInput
  id: UuidOperationFilterInput
  or: [PlanSubscriptionFilterInput!]
  paymentConfirmationId: UuidOperationFilterInput
  priceTier: PriceTierFilterInput
  priceTierId: IntOperationFilterInput
  startDate: DateTimeOperationFilterInput
  status: StringOperationFilterInput
  trials: ListFilterInputTypeOfTrialFilterInput
}

input PlanSubscriptionSortInput {
  clientId: SortEnumType
  createdAt: SortEnumType
  endDate: SortEnumType
  id: SortEnumType
  paymentConfirmationId: SortEnumType
  priceTier: PriceTierSortInput
  priceTierId: SortEnumType
  startDate: SortEnumType
  status: SortEnumType
}

input PriceTierFeatureFilterInput {
  aiSupport: BooleanOperationFilterInput
  and: [PriceTierFeatureFilterInput!]
  id: IntOperationFilterInput
  maxMessages: IntOperationFilterInput
  or: [PriceTierFeatureFilterInput!]
  priceTier: PriceTierFilterInput
  priceTierId: IntOperationFilterInput
  supportTier: StringOperationFilterInput
}

input PriceTierFilterInput {
  and: [PriceTierFilterInput!]
  createdAt: DateTimeOperationFilterInput
  description: StringOperationFilterInput
  discountCodes: ListFilterInputTypeOfDiscountCodeFilterInput
  duration: TimeSpanOperationFilterInput
  iconUrl: StringOperationFilterInput
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  or: [PriceTierFilterInput!]
  plan: PlanFilterInput
  planId: IntOperationFilterInput
  planSubscriptions: ListFilterInputTypeOfPlanSubscriptionFilterInput
  price: DecimalOperationFilterInput
  priceTierFeatures: ListFilterInputTypeOfPriceTierFeatureFilterInput
  trialOffers: ListFilterInputTypeOfTrialOfferFilterInput
}

input PriceTierSortInput {
  createdAt: SortEnumType
  description: SortEnumType
  duration: SortEnumType
  iconUrl: SortEnumType
  id: SortEnumType
  name: SortEnumType
  plan: PlanSortInput
  planId: SortEnumType
  price: SortEnumType
}

input SendMessageInput {
  audience: Audience!
  message: String!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  contains: String
  endsWith: String
  eq: String
  in: [String]
  ncontains: String
  nendsWith: String
  neq: String
  nin: [String]
  nstartsWith: String
  or: [StringOperationFilterInput!]
  startsWith: String
}

input SubscribeToClientInput {
  clientId: ID!
  subscriberId: ID!
}

input SubscribeToPlanInput {
  clientId: ID!
  paymentConfirmationId: UUID!
  priceTierId: ID!
}

input SubscriberFilterInput {
  and: [SubscriberFilterInput!]
  clients: ListFilterInputTypeOfClientFilterInput
  joinedDate: DateTimeOperationFilterInput
  locale: StringOperationFilterInput
  or: [SubscriberFilterInput!]
  phoneNumber: StringOperationFilterInput
}

input SubscriberSortInput {
  joinedDate: SortEnumType
  locale: SortEnumType
  phoneNumber: SortEnumType
}

input TimeSpanOperationFilterInput {
  eq: TimeSpan
  gt: TimeSpan
  gte: TimeSpan
  in: [TimeSpan]
  lt: TimeSpan
  lte: TimeSpan
  neq: TimeSpan
  ngt: TimeSpan
  ngte: TimeSpan
  nin: [TimeSpan]
  nlt: TimeSpan
  nlte: TimeSpan
}

input TrialFilterInput {
  and: [TrialFilterInput!]
  createdAt: DateTimeOperationFilterInput
  id: IntOperationFilterInput
  or: [TrialFilterInput!]
  planSubscription: PlanSubscriptionFilterInput
  planSubscriptionId: UuidOperationFilterInput
  trailOffer: TrialOfferFilterInput
  trailOfferId: IntOperationFilterInput
}

input TrialOfferFilterInput {
  and: [TrialOfferFilterInput!]
  createdAt: DateTimeOperationFilterInput
  description: StringOperationFilterInput
  duration: TimeSpanOperationFilterInput
  expiryDate: DateTimeOperationFilterInput
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  or: [TrialOfferFilterInput!]
  priceTier: PriceTierFilterInput
  priceTierId: IntOperationFilterInput
  trials: ListFilterInputTypeOfTrialFilterInput
}

input UnsubscribeFromClientInput {
  clientId: ID!
  subscriberId: ID!
}

input UpdatePriceTierInput {
  duration: TimeSpan!
  id: ID!
  name: String!
  planId: ID!
  price: Decimal!
}

input UuidOperationFilterInput {
  eq: UUID
  gt: UUID
  gte: UUID
  in: [UUID]
  lt: UUID
  lte: UUID
  neq: UUID
  ngt: UUID
  ngte: UUID
  nin: [UUID]
  nlt: UUID
  nlte: UUID
}

enum ApplyPolicy {
  AFTER_RESOLVER
  BEFORE_RESOLVER
  VALIDATION
}

enum Audience {
  ACTIVE_CLIENTS
  ACTIVE_CLIENTS_WITHOUT_SUBSCRIBERS
  ALL_CLIENTS
  EVERYONE
  SUBSCRIBERS
}

enum SortEnumType {
  ASC
  DESC
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The built-in `Decimal` scalar type."
scalar Decimal

"The `TimeSpan` scalar represents an ISO-8601 compliant duration type."
scalar TimeSpan

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")